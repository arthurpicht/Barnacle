##########################################################
#
# Default-Konfiguration für den BARNACLE O/R-Mapper
#
# In der Sektion [general] werden übergreifende Parameter
# festgelegt.
#
# Es folgt eine Default-Sektion [*] (Template) als Vorlage
# für alle Sektionen in projektspezifischen Konfigurations-
# dateien.
#
# Jedes Projekt, welches Barnacle nutzt, muss diese Default-
# Konfiguration in einer Datei barnacle.conf, welche im 
# Klassenpfad zu finden ist, überschreiben.
#
# Wenn Generator-Funktionen genutzt werden, muss die
# Konfigurationsdatei eine [generator]-Sektion besitzen.
#
# 2007 - 2018, Arthur Picht, Düsseldorf
#
##########################################################

[general]

# Name des log4j-Loggers
logger = BARNACLE

# Konfiguration bei Initialisierung auf Logger ausgeben
log_init_config = true

[*]

# Package für das diese Sektion gültig ist.
# Eine Auswertung dieses Parameters erfolgt nur, wenn mehr als
# eine DB-spezifische Sektion vorhanden ist, sonst erfolgt immer
# eine Anwendung der ersten und einzigen Sektion außer [general].
dao_package = *

# JDBC-Treiber-Klasse
driver_name = com.mysql.jdbc.Driver

# Name der Datenbank
# ACHTUNG: Muß unbedingt in der projektspezifischen Konfiguration
# überschrieben werden!
# db_name = ???????????

# IP oder Name des Datenbankservers
db_host = 127.0.0.1

# DB-Benutzerdaten
db_user = barnacle
db_password = barnacle

# RDBMS
rdbms = mysql

# Modus der JDBC-Verbindung
# 1 = single connection
#     Nur eine Verbindung wird als Singleton gehalten.
# 2 = direct connection
#     Direkte und eigene Verbindung.
# 3 = JNDI-Datasource
# 4 = Connection-Pool
connection_type = 1

# [generator]

# Eine [generator]-Sektion ist erforderlich bei Nutzung der Generierung.
# Diese Sektion wird auch nur unter dieser Bedingung ausgewertet.

# Source-Verzeichnis in dem die Barnacle-Packages mit den annotierten VOF-Klassen
# zu finden sind.
# optional, default ist 'src'
# src_dir = src

# Verzeichnis in dem die generierten Packages und Klassen erzeugt werden
# optional, default ist 'src-gen'
# src_gen_dir = src-gen

# Bezeichnung des VOF-Packages, obligatorisch
# vof_package_name = de.arthurpicht.myproject.persistence.vof

# Bezeichnung des VO-Packages, obligatorisch
# vo_package_name = de.arthurpicht.myproject.persistence.vo

# Bezeichnung des VOB-Packages, obligatorisch
# vob_package_name = de.arthurpicht.myproject.persistence.vob

# Bezeichnung des DAO-Packages, obligatorisch
# dao_package_name = de.arthurpicht.myproject.persistence.dao

# Generiertes DB-Schema in DB erzeugen? {true | false}
# optional, default ist 'false'
# execute_on_db = false

# Generiertes DB-Schema in SQL-Skript schreiben? {true | false}
# optional, default ist 'false'
# create_script = false

# Bezeichnung des SQL-Skriptes für generiertes DB-Schema
# nur obligatorisch wenn create_script=true
# script_file = sql/schema-gen.sql

# Encoding-Information für DB. Wenn 'default' werden alle erzeugten
# Tabellen im Standard-Encoding der DB belassen, ansonsten werden
# die Tabellen explizit für 'UTF-8' bzw. 'ISO-8859-1' codiert.
# {DEFAULT | ISO | UTF}
# optional, default ist 'DEFAULT'
# encoding_db = DEFAULT

# Encoding der generierten Java-Dateien {UTF, ISO, DEFAULT}
# optional, default ist UTF, d.h. die Java-Source-Dateien werden im Default-Encoding
# des Systems erstellt. 
# encoding_source = UTF

# Class ConnectionManager is superclass of all DAOs. By providing a custom
# implementation, the functionality using generated DAOs and VOs gets independent
# of direct and transient dependencies to Barnacle at runtime.
# Custom ConnectionManager must implement ConnectionManagerInterface and provide
# a static getInstance method as a singleton.
#
# connection_manager_class = de.arthurpicht.barnacle.connectionManager.ConnectionManager

# connection_exception_class = de.arthurpicht.barnacle.exceptions.DBConnectionException

# entity_not_found_exception_class = de.arthurpicht.barnacle.exceptions.EntityNotFoundException;

# Logger names for generated DAO-classes. If not defined, logger name will be set to class name.
# dao_logger_name =
